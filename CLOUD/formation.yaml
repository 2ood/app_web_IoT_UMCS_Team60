AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: "file to prove work on cloud infra"
Resources:

    EC2VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "10.0.0.0/16"
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: "default"
            Tags: 
              - 
                Key: "Name"
                Value: "osam_UMCS"

    EC2Subnet:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}c"
            CidrBlock: "10.0.2.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false

    EC2Subnet2:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet3.AvailabilityZone
            CidrBlock: "10.0.1.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false

    EC2Subnet3:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            CidrBlock: "10.0.0.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false
            Tags: 
              - 
                Key: "Name"
                Value: "public_subnet"

    EC2InternetGateway:
        Type: "AWS::EC2::InternetGateway"
        Properties:
            Tags: 
              - 
                Key: "Name"
                Value: "UMCS_IGW"

    EC2EIP:
        Type: "AWS::EC2::EIP"
        Properties:
            Domain: "vpc"

    EC2EIPAssociation:
        Type: "AWS::EC2::EIPAssociation"
        Properties:
            AllocationId: !GetAtt EC2EIP.AllocationId
            NetworkInterfaceId: "eni-0dde466a67cbd8eb0"
            PrivateIpAddress: "10.0.0.187"

    EC2DHCPOptions:
        Type: "AWS::EC2::DHCPOptions"
        Properties:
            DomainName: !Sub "${AWS::Region}.compute.internal"

    EC2VPCDHCPOptionsAssociation:
        Type: "AWS::EC2::VPCDHCPOptionsAssociation"
        Properties:
            DhcpOptionsId: !Ref EC2DHCPOptions
            VpcId: !Ref EC2VPC

    EC2RouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC

    EC2RouteTable2:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags: 
              - 
                Key: "Name"
                Value: "public_RT"

    EC2RouteTable3:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC
            Tags: 
              - 
                Key: "Name"
                Value: "pirvate_RT"

    EC2Route:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            NatGatewayId: !Ref EC2NatGateway
            RouteTableId: !Ref EC2RouteTable

    EC2Route2:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            GatewayId: !Ref EC2InternetGateway
            RouteTableId: !Ref EC2RouteTable2

    EC2Route3:
        Type: "AWS::EC2::Route"
        Properties:
            DestinationCidrBlock: "0.0.0.0/0"
            NatGatewayId: !Ref EC2NatGateway
            RouteTableId: !Ref EC2RouteTable3

    EC2NatGateway:
        Type: "AWS::EC2::NatGateway"
        Properties:
            SubnetId: !Ref EC2Subnet3
            Tags: 
              - 
                Key: "Name"
                Value: "UMCS_NAT"
            AllocationId: !GetAtt EC2EIP.AllocationId

    EC2VPCGatewayAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            InternetGatewayId: !Ref EC2InternetGateway
            VpcId: !Ref EC2VPC

    EC2SubnetRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable2
            SubnetId: !Ref EC2Subnet

    EC2SubnetRouteTableAssociation2:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable2
            SubnetId: !Ref EC2Subnet3

    EC2SubnetRouteTableAssociation3:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable3
            SubnetId: !Ref EC2Subnet2

    Route53HostedZone:
        Type: "AWS::Route53::HostedZone"
        Properties:
            Name: !Ref Route53RecordSet

    Route53RecordSet:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: !Ref Route53RecordSet2
            Type: "A"
            AliasTarget: 
                HostedZoneId: !GetAtt ElasticLoadBalancingV2LoadBalancer.CanonicalHostedZoneID
                DNSName: 
                EvaluateTargetHealth: true
            HostedZoneId: 

    Route53RecordSet2:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: !Ref Route53RecordSet3
            Type: "NS"
            TTL:
            ResourceRecords: 
              - "ns-715.awsdns-25.net."
              - "ns-1699.awsdns-20.co.uk."
              - "ns-1328.awsdns-38.org."
              - "ns-211.awsdns-26.com."
            HostedZoneId: 

    Route53RecordSet3:
        Type: "AWS::Route53::RecordSet"
        Properties:
            Name: "militaryumcs.com."
            Type: "SOA"
            TTL: 
            ResourceRecords: 
              - 
            HostedZoneId: 

    EC2Instance:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: "ami-0ba5cd124d7a79612"
            InstanceType: "t3.small"
            KeyName: "intranet_key"
            AvailabilityZone: !GetAtt EC2Instance2.AvailabilityZone
            Tenancy: "default"
            SubnetId: "subnet-0fb52fdefc6a62bcc"
            EbsOptimized: true
            SecurityGroupIds: 
              - !Ref EC2SecurityGroup3
            SourceDestCheck: true
            BlockDeviceMappings: 
              - 
                DeviceName: "/dev/sda1"
                Ebs: 
                    Encrypted: false
                    VolumeSize: 8
                    SnapshotId: "snap-0686680c8efb82da8"
                    VolumeType: "gp2"
                    DeleteOnTermination: true
            Tags: 
              - 
                Key: "Name"
                Value: "Private_Server"
            HibernationOptions: 
                Configured: false
            CpuOptions: 
                CoreCount: 1
                ThreadsPerCore: 2
            EnclaveOptions: 
                Enabled: false

    EC2Instance2:
        Type: "AWS::EC2::Instance"
        Properties:
            ImageId: "ami-0ba5cd124d7a79612"
            InstanceType: "t3.medium"
            KeyName: "osam_remote_test"
            AvailabilityZone: !Sub "${AWS::Region}a"
            Tenancy: "default"
            SubnetId: "subnet-0da1bab76a118bac6"
            EbsOptimized: true
            SecurityGroupIds: 
              - !Ref EC2SecurityGroup
            SourceDestCheck: true
            BlockDeviceMappings: 
              - 
                DeviceName: "/dev/sda1"
                Ebs: 
                    Encrypted: false
                    VolumeSize: 16
                    SnapshotId: "snap-0686680c8efb82da8"
                    VolumeType: "gp2"
                    DeleteOnTermination: true
            IamInstanceProfile: !Ref IAMRole7
            Tags: 
              - 
                Key: "Name"
                Value: "Public_Server_v3"
            HibernationOptions: 
                Configured: false
            CpuOptions: 
                CoreCount: 1
                ThreadsPerCore: 2
            EnclaveOptions: 
                Enabled: false

    ElasticLoadBalancingV2LoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "UMCS-ALB-V2"
            Scheme: "internet-facing"
            Type: "application"
            Subnets: 
              - !Ref EC2Subnet3
              - !Ref EC2Subnet
            SecurityGroups: 
              - !Ref EC2SecurityGroup2
            IpAddressType: "ipv4"
            LoadBalancerAttributes: 
              - 
                Key: "access_logs.s3.enabled"
                Value: "false"
              - 
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              - 
                Key: "deletion_protection.enabled"
                Value: "false"
              - 
                Key: "routing.http2.enabled"
                Value: "true"
              - 
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              - 
                Key: "routing.http.xff_client_port.enabled"
                Value: "false"
              - 
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              - 
                Key: "waf.fail_open.enabled"
                Value: "false"
              - 
                Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
                Value: "false"

    ElasticLoadBalancingV2Listener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions: 
              - 
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                Type: "forward"

    ElasticLoadBalancingV2Listener2:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ElasticLoadBalancingV2LoadBalancer
            Port: 443
            Protocol: "HTTPS"
            SslPolicy: "ELBSecurityPolicy-2016-08"
            Certificates: 
              - 
                CertificateArn: !Ref CertificateManagerCertificate
            DefaultActions: 
              - 
                TargetGroupArn: !Ref ElasticLoadBalancingV2TargetGroup
                Type: "forward"

    EC2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "public_sg"
            GroupName: "public_sg"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 22
                IpProtocol: "tcp"
                ToPort: 22
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup2:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "public_alb"
            GroupName: "public_alb"
            Tags: 
              - 
                Key: "Name"
                Value: "public_alb"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                CidrIp: "0.0.0.0/0"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup3:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "launch-wizard-1 created 2021-09-21T16:51:11.101+09:00"
            GroupName: "Private_sg"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress: 
              - 
                CidrIp: "10.0.0.0/24"
                FromPort: 3306
                IpProtocol: "tcp"
                ToPort: 3306
            SecurityGroupEgress: 
              - 
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: "ALB-RT"
            HealthCheckEnabled: true
            TargetGroupAttributes: 
              - 
                Key: "stickiness.enabled"
                Value: "false"
              - 
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              - 
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              - 
                Key: "stickiness.type"
                Value: "lb_cookie"
              - 
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "slow_start.duration_seconds"
                Value: "0"
              - 
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              - 
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"
            Targets: 
              - 
                Id: !Ref EC2Instance2
                Port: 80

    EC2Volume:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet2.AvailabilityZone
            Encrypted: false
            Size: 8
            VolumeType: "gp2"
            SnapshotId: "snap-0686680c8efb82da8"
            Tags: 
              - 
                Key: "Name"
                Value: "Private_Server"
            MultiAttachEnabled: false

    EC2Volume2:
        Type: "AWS::EC2::Volume"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet2.AvailabilityZone
            Encrypted: false
            Size: 16
            VolumeType: "gp2"
            SnapshotId: "snap-0686680c8efb82da8"
            Tags: 
              - 
                Key: "Name"
                Value: "Public_Server_v3"
            MultiAttachEnabled: false

    EC2VolumeAttachment:
        Type: "AWS::EC2::VolumeAttachment"
        Properties:
            VolumeId: !Ref EC2Volume
            InstanceId: !Ref EC2Instance
            Device: "/dev/sda1"

    EC2VolumeAttachment2:
        Type: "AWS::EC2::VolumeAttachment"
        Properties:
            VolumeId: !Ref EC2Volume2
            InstanceId: !Ref EC2Instance2
            Device: "/dev/sda1"

    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: 

    S3Bucket2:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: 
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false

    S3Bucket3:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "umcs-infra-format"

    S3Bucket4:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "umcs-s3-deploy"
            Tags: 
              - 
                Key: "Name"
                Value: "s3_deploy"

    ElastiCacheUser:
        Type: "AWS::ElastiCache::User"
        Properties:
            UserId: "default"
            UserName: "default"
            Engine: "redis"
            AccessString: "on ~* +@all"
            NoPasswordRequired: true

    OpsWorksUserProfile:
        Type: "AWS::OpsWorks::UserProfile"
        Properties:
            AllowSelfManagement: false
            IamUserArn: !Sub "arn:aws:iam::${AWS::AccountId}:user/cloudform-v2"
            SshUsername: "cloudform-v2"

    LogsLogGroup:
        Type: "AWS::Logs::LogGroup"
        Properties:
            LogGroupName: "RDSOSMetrics"
            RetentionInDays: 30

    LogsLogStream:
        Type: "AWS::Logs::LogStream"
        Properties:
            LogGroupName: "RDSOSMetrics"
            LogStreamName: "db-FURZ6SRR5GD7IDIU642SZQ5JFA"

    NeptuneDBSubnetGroup:
        Type: "AWS::Neptune::DBSubnetGroup"
        Properties:
            DBSubnetGroupName: "default-vpc-0a32c2bf73a4dfc84"
            DBSubnetGroupDescription: "Created from the RDS Management Console"
            SubnetIds: 
              - "subnet-0dd910d4a67aba3ea"
              - "subnet-0b3c3247792381183"
              - "subnet-03c96819a251e9650"
              - "subnet-01b47afac30497575"
              - "subnet-00c34217324e9d102"
              - "subnet-00fdd3bf31e1f9ef6"

    DocDBDBSubnetGroup:
        Type: "AWS::DocDB::DBSubnetGroup"
        Properties:
            DBSubnetGroupName: "default-vpc-0a32c2bf73a4dfc84"
            DBSubnetGroupDescription: "Created from the RDS Management Console"
            SubnetIds: 
              - "subnet-0dd910d4a67aba3ea"
              - "subnet-0b3c3247792381183"
              - "subnet-03c96819a251e9650"
              - "subnet-01b47afac30497575"
              - "subnet-00c34217324e9d102"
              - "subnet-00fdd3bf31e1f9ef6"

    CodeDeployApplication:
        Type: "AWS::CodeDeploy::Application"
        Properties:
            ApplicationName: "UMCS-deploy-v2"
            ComputePlatform: "Server"

    CodeDeployDeploymentGroup:
        Type: "AWS::CodeDeploy::DeploymentGroup"
        Properties:
            ApplicationName: !Ref CodeDeployApplication
            DeploymentGroupName: "UMCS-deploy-group-v2"
            DeploymentConfigName: "CodeDeployDefault.AllAtOnce"
            ServiceRoleArn: !GetAtt IAMRole6.Arn
            AlarmConfiguration: 
                Enabled: false
                IgnorePollAlarmFailure: false
            DeploymentStyle: 
                DeploymentType: "IN_PLACE"
                DeploymentOption: "WITHOUT_TRAFFIC_CONTROL"
            Ec2TagSet: {}
            OnPremisesTagSet: {}

    WAFv2WebACL:
        Type: "AWS::WAFv2::WebACL"
        Properties:
            Name: "UMCS-ACL"
            Description: "UMCS-ACL"
            DefaultAction: 
                Allow: {}
            VisibilityConfig: 
                SampledRequestsEnabled: true
                CloudWatchMetricsEnabled: true
                MetricName: "UMCS-ACL"
            Scope: "REGIONAL"
            Rules: 
              - 
                Name: "AWS-AWSManagedRulesAnonymousIpList"
                Priority: 0
                OverrideAction: 
                    None: {}
                Statement: 
                    ManagedRuleGroupStatement: 
                        VendorName: "AWS"
                        Name: "AWSManagedRulesAnonymousIpList"
                        ExcludedRules: 
                          - 
                            Name: "AnonymousIPList"
                          - 
                            Name: "HostingProviderIPList"
                VisibilityConfig: 
                    SampledRequestsEnabled: true
                    CloudWatchMetricsEnabled: true
                    MetricName: "AWS-AWSManagedRulesAnonymousIpList"
              - 
                Name: "AWS-AWSManagedRulesSQLiRuleSet"
                Priority: 1
                OverrideAction: 
                    None: {}
                Statement: 
                    ManagedRuleGroupStatement: 
                        VendorName: "AWS"
                        Name: "AWSManagedRulesSQLiRuleSet"
                VisibilityConfig: 
                    SampledRequestsEnabled: true
                    CloudWatchMetricsEnabled: true
                    MetricName: "AWS-AWSManagedRulesSQLiRuleSet"
              - 
                Name: "AWS-AWSManagedRulesCommonRuleSet"
                Priority: 2
                OverrideAction: 
                    None: {}
                Statement: 
                    ManagedRuleGroupStatement: 
                        VendorName: "AWS"
                        Name: "AWSManagedRulesCommonRuleSet"
                VisibilityConfig: 
                    SampledRequestsEnabled: true
                    CloudWatchMetricsEnabled: true
                    MetricName: "AWS-AWSManagedRulesCommonRuleSet"
              - 
                Name: "AWS-AWSManagedRulesLinuxRuleSet"
                Priority: 3
                OverrideAction: 
                    None: {}
                Statement: 
                    ManagedRuleGroupStatement: 
                        VendorName: "AWS"
                        Name: "AWSManagedRulesLinuxRuleSet"
                VisibilityConfig: 
                    SampledRequestsEnabled: true
                    CloudWatchMetricsEnabled: true
                    MetricName: "AWS-AWSManagedRulesLinuxRuleSet"
              - 
                Name: "NotExecURL"
                Priority: 4
                Action: 
                    Block: {}
                Statement: 
                    ByteMatchStatement: 
                        SearchString: 
                            type: "Buffer"
                            data: 
                              - 101
                              - 120
                              - 101
                              - 99
                        FieldToMatch: 
                            UriPath: {}
                        TextTransformations: 
                          - 
                            Priority: 0
                            Type: "NONE"
                        PositionalConstraint: "CONTAINS"
                VisibilityConfig: 
                    SampledRequestsEnabled: true
                    CloudWatchMetricsEnabled: true
                    MetricName: "NotExecURL"

    WAFv2WebACLAssociation:
        Type: "AWS::WAFv2::WebACLAssociation"
        Properties:
            ResourceArn: !Ref ElasticLoadBalancingV2LoadBalancer

    CertificateManagerCertificate:
        Type: "AWS::CertificateManager::Certificate"
        Properties:
            DomainName: "militaryumcs.com"
            SubjectAlternativeNames: 
              - "militaryumcs.com"
            DomainValidationOptions: 
              - 
                DomainName: "militaryumcs.com"
                ValidationDomain: "militaryumcs.com"
            CertificateTransparencyLoggingPreference: "ENABLED"

    CodePipelinePipeline:
        Type: "AWS::CodePipeline::Pipeline"
        Properties:
            Name: "UMCS_codepipeline"
            RoleArn: !GetAtt IAMRole.Arn
            ArtifactStore: 
                Location: !Ref S3Bucket
                Type: "S3"
            Stages: 
              - 
                Name: "Source"
                Actions: 
                  - 
                    Name: "Source"
                    ActionTypeId: 
                        Category: "Source"
                        Owner: "ThirdParty"
                        Provider: "GitHub"
                        Version: "1"
                    Configuration: 
                        Branch: "main"
                        OAuthToken: 
                        Owner: "osamhack2021"
                        PollForSourceChanges: "false"
                        Repo: "app_web_IoT_UMCS_Team60"
                    OutputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "SourceVariables"
                    RunOrder: 1
              - 
                Name: "Deploy"
                Actions: 
                  - 
                    Name: "Deploy"
                    ActionTypeId: 
                        Category: "Deploy"
                        Owner: "AWS"
                        Provider: "CodeDeploy"
                        Version: "1"
                    Configuration: 
                        ApplicationName: !Ref CodeDeployApplication
                        DeploymentGroupName: !Ref CodeDeployDeploymentGroup
                    InputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "DeployVariables"
                    RunOrder: 1

    CodePipelineWebhook:
        Type: "AWS::CodePipeline::Webhook"
        Properties:
            Name: "UMCScodepipeline--Source--osamhack2021appwebIoTUMCSTe--794268076"
            TargetPipeline: "UMCS_codepipeline"
            TargetAction: "Source"
            Authentication: 
            AuthenticationConfiguration: 
                SecretToken: 

    SSMAssociation:
        Type: "AWS::SSM::Association"
        Properties:
            Name: "AWS-ConfigureAWSPackage"
            DocumentVersion: "$DEFAULT"
            Parameters: 
                action: 
                  - "Install"
                name: 
                  - "AWSCodeDeployAgent"
            AssociationName: "CodeDeployDG-UMCS_deploy_app_g"
            Targets: 
              - 
                Key: "tag:Name"
                Values: 
                  - "Public_Server"

    SSMAssociation2:
        Type: "AWS::SSM::Association"
        Properties:
            Name: "AWS-ConfigureAWSPackage"
            DocumentVersion: "$DEFAULT"
            Parameters: 
                action: 
                  - "Install"
                name: 
                  - "AWSCodeDeployAgent"
            AssociationName: "CodeDeployDG-UMCS_deploy_group"
            Targets: 
              - 
                Key: "tag:Name"
                Values: 
                  - "Public_Server"
